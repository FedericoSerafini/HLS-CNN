#include "cnn.hh"
#include "utils.hh"

#include <cstdio>
#include <ctime>
#include <iostream>

#include "../Headers/type_definitions.h"

#define N 10

//inline
//float24_t
//float_to_fixed(float input)
//{
//    return (float24_t)(round(input * (1 << INT_WIDTH)));
//}

int
read_images (const char * file, float24_t images [N][IMG_ROWS][IMG_COLS])
{
  FILE *fp;

  fp = fopen(file, "r");

  if (fp == NULL)
    return -1;

  for (int i = 0; i < N; ++i)
    for (int x = 0; x < IMG_ROWS; ++x)
      for (int y = 0; y < IMG_COLS; ++y)
      {
        (void)fscanf(fp, "%f", & images[i][x][y]);
      }

  return fclose(fp);
}

int
read_labels(const char * file, int labels[N])
{
  FILE *fp;

  fp = fopen(file, "r");

  if (fp == NULL)
    return -1;

  for (int i = 0; i < N; ++i)
    (void)fscanf(fp, "%d", & labels[i]);

  return fclose(fp);
}

int
get_max_prediction (float24_t prediction [DIGITS])
{
  int max_digit = 0;
  for (int i = 0; i < DIGITS; ++i)
  {
    if (prediction[i] > prediction[max_digit])
      max_digit = i;
  }
  return max_digit;
}

int main ()
{
  /**** Basic parameters check. ****/
  // Enforce odd kernel dimensions.
  if ((0 == (KRN_ROWS % 2)) || (0 == (KRN_COLS % 2)))
  {
    printf("Error: odd kernel sizes are mandatory for this implementation \n");
    return 1;
  }

  /**** Read the images. ****/
  float24_t images[N][IMG_ROWS][IMG_COLS];
//  =
//  {
//    {
//      {0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0},
//      {0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0},
//      {0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0},
//      {0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0},
//      {0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0},
//      {0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,17.00 ,66.00 ,138.00 ,255.00 ,253.00 ,169.00 ,138.00 ,23.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0},
//      {0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,5.00 ,120.00 ,228.00 ,252.00 ,252.00 ,253.00 ,252.00 ,252.00 ,252.00 ,158.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0},
//      {0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,108.00 ,252.00 ,252.00 ,252.00 ,252.00 ,190.00 ,252.00 ,252.00 ,252.00 ,252.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0},
//      {0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,43.00 ,233.00 ,252.00 ,252.00 ,252.00 ,116.00 ,5.00 ,135.00 ,252.00 ,252.00 ,252.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0},
//      {0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,43.00 ,178.00 ,253.00 ,252.00 ,221.00 ,43.00 ,2.00 ,0.00 ,5.00 ,54.00 ,232.00 ,252.00 ,210.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0},
//      {0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,93.00 ,253.00 ,255.00 ,249.00 ,115.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,136.00 ,251.00 ,255.00 ,154.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0},
//      {0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,166.00 ,252.00 ,253.00 ,185.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,209.00 ,253.00 ,206.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0},
//      {0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,19.00 ,220.00 ,252.00 ,253.00 ,92.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,116.00 ,253.00 ,206.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0},
//      {0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,70.00 ,252.00 ,252.00 ,192.00 ,17.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,116.00 ,253.00 ,223.00 ,25.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0},
//      {0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,122.00 ,252.00 ,252.00 ,63.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,116.00 ,253.00 ,252.00 ,69.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0},
//      {0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,132.00 ,253.00 ,253.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,116.00 ,255.00 ,253.00 ,69.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0},
//      {0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,184.00 ,252.00 ,252.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,116.00 ,253.00 ,252.00 ,69.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0},
//      {0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,184.00 ,252.00 ,252.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,116.00 ,253.00 ,240.00 ,50.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0},
//      {0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,184.00 ,252.00 ,252.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,210.00 ,253.00 ,112.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0},
//      {0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,48.00 ,232.00 ,252.00 ,158.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,230.00 ,232.00 ,8.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0},
//      {0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,93.00 ,253.00 ,244.00 ,50.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,155.00 ,253.00 ,168.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0},
//      {0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,34.00 ,164.00 ,253.00 ,113.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,66.00 ,236.00 ,231.00 ,42.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0},
//      {0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,32.00 ,222.00 ,240.00 ,134.00 ,0.00 ,0.00 ,38.00 ,91.00 ,234.00 ,252.00 ,137.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0},
//      {0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,25.00 ,177.00 ,240.00 ,207.00 ,103.00 ,233.00 ,252.00 ,252.00 ,176.00 ,35.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0},
//      {0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,15.00 ,54.00 ,179.00 ,252.00 ,137.00 ,137.00 ,54.00 ,4.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0},
//      {0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0},
//      {0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0},
//      {0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0.00 ,0}
//    }
//};
  
  if (0 != read_images("Data/in.dat", images))
  {
    printf("Error: can't open file ``Data/in.dat''\n");
    return 1;
  }

  /**** Read expected labels. ****/
  int labels[N];
  if (0 != read_labels("Data/out.dat", labels))
  {
    printf("Error: can't open file ``Data/out.dat''\n");
    return 1;
  }

  /**** Do N predictions. ****/
  double time = 0;
  int correct_predictions = 0;
  float24_t prediction [DIGITS];

  for (int i = 0; i < N; ++i)
  {
    //for(int r = 0; r < IMG_ROWS; ++r)
    //{
    //  for(int c = 0; c < IMG_COLS; ++c)
    //  {
    //    //std::cout << images[i][r][c] << std::endl;
    //    //printf("%f ", images[i][r][c]);
    //  }  
    //  printf("\n");
    //}

    // CNN execution, obtain a prediction.
    clock_t begin = clock();
    cnn(images[i], prediction);
    clock_t end = clock();

    if (get_max_prediction(prediction) == labels[i])
    {
      ++correct_predictions;
    }
    else
    {
      printf("\nExpected: %d\n", labels[i]);
      float24_t pad_img [PAD_IMG_ROWS][PAD_IMG_COLS];
      normalization_and_padding(images[i], pad_img);
      print_pad_img(pad_img);
      printf("Prediction:\n");
      for (int j = 0; j < DIGITS; ++j)
        printf("%d: %s\n", j, prediction[j].to_string(10).c_str());
        //std::cout << j << ": " << std::setprecision (9) << (float)prediction[j] << std::endl;
      printf("\n");
    }

    // Sum up time spent.
    double time_spent = (double)(end - begin) / CLOCKS_PER_SEC;
    time += time_spent;
  }

  double correct_predictions_perc = correct_predictions * 100.0 / (double)N;
  printf("\n");
  printf("Total predictions: %d\n", N);
  printf("Correct predictions: %.2f %%\n", correct_predictions_perc);
  printf("Average latency: %f (ms)\n", (time / N) * 1000);
  printf("\n");

  return correct_predictions_perc < 95.0;
}
